#!/usr/bin/env python3

import argparse
import csv
import logging
import sys

from ngsderive import utils
from ngsderive.commands import readlen, instrument, strandedness

logger = logging.getLogger('ngsderive')

def get_args():
  parser = argparse.ArgumentParser(description="Derive useful information (or best guess) from next-generation sequencing files.")
  subparsers = parser.add_subparsers(dest="subcommand")

  common = argparse.ArgumentParser(add_help=False)
  common.add_argument("ngsfiles", type=str, nargs="+", help="Next-generation sequencing files to process (BAM or FASTQ).")
  common.add_argument("-o", "--out-file", type=str, help="Write to filename rather than standard out.", default=None)
  common.add_argument("--delim", default="\t", help="Delimiter for the outfile.")
  common.add_argument("--debug", default=False, action="store_true", help="Enable DEBUG log level.")
  common.add_argument('--version', action='version', version='%(prog)s 1.0.0')

  readlen = subparsers.add_parser("readlen", parents=[common])

  instrument = subparsers.add_parser("instrument", parents=[common])

  strandedness = subparsers.add_parser("strandedness", parents=[common])
  strandedness.add_argument("-g", "--gene-model", help="Gene model as a GFF/GTF file.", required=True)
  
  args = parser.parse_args()
  if not args.subcommand:
    parser.print_help()
    sys.exit(1)

  return args


def setup_logging(log_level=logging.INFO):
    """Set up the logging.
    
    Forked from MIT code here: https://github.com/MisterWil/abodepy.
    """
    logging.basicConfig(level=log_level)
    fmt = ("%(asctime)s %(levelname)s (%(threadName)s) "
           "[%(name)s] %(message)s")
    colorfmt = "%(log_color)s{}%(reset)s".format(fmt)
    datefmt = '%H:%M:%S'

    try:
        from colorlog import ColoredFormatter
        logging.getLogger().handlers[0].setFormatter(ColoredFormatter(
            colorfmt,
            datefmt=datefmt,
            reset=True,
            log_colors={
                'DEBUG': 'cyan',
                'INFO': 'green',
                'WARNING': 'yellow',
                'ERROR': 'red',
                'CRITICAL': 'red',
            }
        ))
    except ImportError:
        pass

    logger = logging.getLogger('')
    logger.setLevel(log_level)

def write(line, stream=sys.stdout):
    stream.write(line)
    stream.flush()


if __name__ == '__main__':
  args = get_args()

  log_level = logging.INFO
  if args.debug:
    log_level = logging.DEBUG

  outfile = args.out_file
  if outfile:
    outfile = open(outfile, "w")
  else:
    outfile = sys.stdout

  setup_logging(log_level)

  if args.subcommand == "readlen":
    readlen.main(args.ngsfiles, outfile)
  if args.subcommand == "instrument":
    instrument.main(args.ngsfiles, outfile)
  if args.subcommand == "strandedness":
    logger.debug("Reading gene model.")
    gtf = utils.GFF(args.gene_model, feature_filter=["gene"])
    strandedness.main(args.ngsfiles, gtf, args.gene_model, outfile)
